{"version":3,"sources":["loading.svg","utils/constants.js","components/TableFilter/TableFilter.js","components/PredictionTable/PredictionTable.js","components/CollegePredictor/CollegePredictor.js","utils/getData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","columns","title","property","style","width","data","TableFilter","_ref","value","updateFilters","React","createElement","length","id","name","onChange","e","target","className","map","d","key","PredictionTable","colleges","filters","setFilters","_ref$isLoading","isLoading","val","newFilters","_objectSpread","_defineProperty","src","Loading","alt","col","span","concat","college","index","institute","program","quota","category","seat","openingRank","closingRank","type","courseDuration","colSpan","CollegePredictor","_useState","useState","_useState2","_slicedToArray","setColleges","_useState3","_useState4","rank","setRank","_useState5","_useState6","setLoading","_useState7","_useState8","exam","setExam","_useState9","_useState10","filterData","finalVal","dataFilters","Object","keys","forEach","filter","Array","includes","getFilteredColleges","Promise","resolve","_reject","filteredColleges","arguments","undefined","allData","getByCategory","setTimeout","filterColleges","then","useEffect","Fragment","placeholder","parseInt","onClick","_e","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5da9963a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.49caa1e8.svg\";","const categories = [\r\n  'OPEN',\r\n  'OPEN (PwD)',\r\n  'GEN-EWS',\r\n  'GEN-EWS(PwD)',\r\n  'OBC-NCL',\r\n  'OBC-NCL(PwD)',\r\n  'SC',\r\n  'SC (PwD)',\r\n  'ST',\r\n  'ST (PwD)',\r\n]\r\n\r\nconst quotas = [\r\n  'All',\r\n  'AI',\r\n  'HS',\r\n  'OS',\r\n  'AP',\r\n  'GO',\r\n]\r\n\r\nconst courseDuration = [\r\n  'All',\r\n  '4 Years',\r\n  '5 Years',\r\n]\r\n\r\nconst seatTypes = ['All', 'Gender-Neutral', 'Female-Only']\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Institute name',\r\n    property: 'institute',\r\n    style: { width: '30%' },\r\n  },\r\n  {\r\n    title: 'Program',\r\n    property: 'program',\r\n    style: { width: '65%' },\r\n  },\r\n  {\r\n    title: 'Quota',\r\n    property: 'quota',\r\n    data: quotas,\r\n    style: { width: '5%' },\r\n  },\r\n  {\r\n    title: 'Categories',\r\n    property: 'category',\r\n    data: categories,\r\n    style: { width: '5%' },\r\n  },\r\n  {\r\n    title: 'Seat Type',\r\n    property: 'seat',\r\n    data: seatTypes,\r\n    style: { width: '5%' },\r\n  },\r\n  {\r\n    title: 'Opening Rank',\r\n    property: 'openingRank',\r\n    style: { width: '5%' },\r\n  },\r\n  {\r\n    title: 'Closing Rank',\r\n    property: 'closingRank',\r\n    style: { width: '5%' },\r\n  },\r\n  {\r\n    title: 'College Type',\r\n    property: 'type',\r\n    style: { width: '5%' },\r\n  },\r\n  {\r\n    title: 'Course Duration',\r\n    property: 'courseDuration',\r\n    data: courseDuration,\r\n    style: { width: '5%' },\r\n  },\r\n]\r\n\r\nexport { categories, seatTypes, columns }\r\n","import React from 'react'\r\n\r\nimport './TableFilter.css'\r\n\r\nconst TableFilter = ({\r\n  title, property, value, data, updateFilters,\r\n}) => (\r\n  <th>\r\n    {title}\r\n    {data?.length && (\r\n      <select\r\n        id={property}\r\n        name={title}\r\n        value={value}\r\n        onChange={(e) => updateFilters(property, e.target.value)}\r\n        className=\"table-filter\"\r\n      >\r\n        {data.map((d) => (\r\n          <option\r\n            key={d}\r\n            value={d}\r\n          >\r\n            {d}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    )}\r\n  </th>\r\n)\r\n\r\nexport default TableFilter\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React from 'react'\r\n\r\nimport './PredictionTable.css'\r\nimport Loading from '../../loading.svg'\r\nimport { columns } from '../../utils/constants'\r\nimport TableFilter from '../TableFilter/TableFilter'\r\n\r\nconst PredictionTable = ({\r\n  colleges, filters,\r\n  setFilters, isLoading = true,\r\n}) => {\r\n  const updateFilters = (key, val) => {\r\n    const newFilters = {\r\n      ...filters,\r\n      [key]: val,\r\n    }\r\n    setFilters(newFilters)\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"loading\">\r\n        <img\r\n          src={Loading}\r\n          alt=\"Loading\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"college-table\">\r\n      <table>\r\n        <colgroup>\r\n          {columns.map((col) => (\r\n            <col\r\n              span=\"1\"\r\n              key={`col-span-${col.title}`}\r\n              style={col.style}\r\n            />\r\n          ))}\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            {columns.map((col) => (\r\n              <TableFilter\r\n                title={col.title}\r\n                data={col.data}\r\n                property={col.property}\r\n                key={col.property}\r\n                value={filters[col.property]}\r\n                updateFilters={updateFilters}\r\n              />\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {colleges?.length ? (colleges).map((college, index) => (\r\n            <tr key={`${index}-${college.institute}`}>\r\n              <td title={college.institute}>\r\n                {college.institute}\r\n              </td>\r\n              <td title={college.program}>\r\n                {college.program}\r\n              </td>\r\n              <td title={college.quota}>\r\n                {college.quota}\r\n              </td>\r\n              <td title={college.category}>\r\n                {college.category}\r\n              </td>\r\n              <td title={college.seat}>\r\n                {college.seat}\r\n              </td>\r\n              <td title={college.openingRank}>\r\n                {college.openingRank}\r\n              </td>\r\n              <td title={college.closingRank}>\r\n                {college.closingRank}\r\n              </td>\r\n              <td title={college.type}>\r\n                {college.type}\r\n              </td>\r\n              <td title={college.courseDuration}>\r\n                {college.courseDuration}\r\n              </td>\r\n            </tr>\r\n          )) : (\r\n            <tr>\r\n              <td\r\n                className=\"none-found\"\r\n                colSpan={columns.length}\r\n              >\r\n                No Colleges found as per filters applied.\r\n              </td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PredictionTable\r\n","/* eslint-disable no-bitwise */\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nimport { getByCategory } from '../../utils/getData'\r\nimport PredictionTable from '../PredictionTable/PredictionTable'\r\nimport './CollegePredictor.css'\r\n\r\nconst CollegePredictor = () => {\r\n  const [colleges, setColleges] = useState([])\r\n  const [rank, setRank] = useState()\r\n  const [isLoading, setLoading] = useState(false)\r\n  const [exam, setExam] = useState('Advanced')\r\n  const [filters, setFilters] = useState({ category: 'OPEN' })\r\n\r\n  const filterData = (college) => {\r\n    let finalVal = rank <= college.closingRank\r\n    // This filter is hardcoded for IIT and Non-IIT\r\n    // eslint-disable-next-line no-param-reassign\r\n    const dataFilters = {\r\n      ...filters,\r\n      type: exam === 'Advanced' ? 'IIT' : ['IIT'],\r\n    }\r\n\r\n    Object.keys(dataFilters)\r\n      .forEach((filter) => {\r\n        // All means skip filter\r\n        if (dataFilters[filter] !== 'All') {\r\n          if (dataFilters[filter] instanceof Array) {\r\n            finalVal &= (!dataFilters[filter].includes(college[filter]))\r\n          } else {\r\n            finalVal &= (college[filter] === dataFilters[filter])\r\n          }\r\n        }\r\n      })\r\n    return finalVal\r\n  }\r\n\r\n  const getFilteredColleges = () => new Promise(((resolve, _reject) => {\r\n    const filteredColleges = getByCategory(filters.category)\r\n      .filter(filterData)\r\n\r\n    // using this to prevent 1 second lag, loading is better than lag\r\n    setTimeout(() => {\r\n      resolve(filteredColleges)\r\n    }, 1000)\r\n  }))\r\n\r\n  const filterColleges = () => {\r\n    setLoading(true)\r\n    getFilteredColleges().then((filteredColleges) => {\r\n      setColleges(filteredColleges)\r\n      setLoading(false)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    filterColleges()\r\n  }, [exam, filters])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filter-form\">\r\n        <div className=\"filter-form__inputs\">\r\n          JEE\r\n          <select\r\n            value={exam}\r\n            onChange={(e) => setExam(e.target.value)}\r\n            className=\"exam-type-select\"\r\n          >\r\n            <option\r\n              key=\"mains\"\r\n              value=\"Mains\"\r\n            >\r\n              Mains\r\n            </option>\r\n            <option\r\n              key=\"adv\"\r\n              value=\"Advanced\"\r\n            >\r\n              Advanced\r\n            </option>\r\n          </select>\r\n          Rank\r\n          <input\r\n            type=\"number\"\r\n            className=\"rank-input\"\r\n            placeholder=\"Enter your rank here\"\r\n            value={rank}\r\n            onChange={(e) => setRank(parseInt(e.target.value, 10))}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            onClick={(_e) => filterColleges()}\r\n            className=\"submit-btn\"\r\n          >\r\n            Get Predictions\r\n          </button>\r\n        </div>\r\n        \r\n      </div>\r\n      <PredictionTable\r\n        colleges={colleges}\r\n        filters={filters}\r\n        setFilters={setFilters}\r\n        isLoading={isLoading}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CollegePredictor\r\n","import allData from './dataSources/categoricalData.json'\r\n\r\nconst getByCategory = (category = 'OPEN') => allData[category]\r\nconst everything = 42\r\n\r\nexport { getByCategory, everything }\r\n","import React from 'react'\r\n\r\nimport './App.css'\r\nimport CollegePredictor from './components/CollegePredictor/CollegePredictor'\r\n\r\nconst App = () => (\r\n  <div className=\"app\">\r\n    <CollegePredictor />\r\n  </div>\r\n)\r\n\r\nexport default App\r\n","/* eslint-disable no-console */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      )\r\n    })\r\n}\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}